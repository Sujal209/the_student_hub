name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: '10m'

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npm run type-check

      - name: Check Prettier formatting
        run: npx prettier --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          NEXT_PUBLIC_COLLEGE_NAME: 'Test College'
          NEXT_PUBLIC_COLLEGE_DOMAIN: 'test.edu'
          NEXT_PUBLIC_APP_NAME: 'Student Notes Hub'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: .next/
          retention-days: 1

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        if: github.event_name == 'push'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        if: github.event_name == 'pull_request'
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-audit]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/

      - name: Deploy to Vercel Staging
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}
          vercel-args: '--target staging'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run staging health checks
        run: |
          echo "Running health checks on staging environment..."
          sleep 30 # Wait for deployment to be ready
          # Add health check logic here
          curl -f ${{ steps.deploy.outputs.preview-url }}/api/health || exit 1

      - name: Update deployment status
        run: |
          echo "üöÄ Staging deployment successful!"
          echo "Staging URL: ${{ steps.deploy.outputs.preview-url }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-audit, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production' && github.event.inputs.rollback == false)
    environment:
      name: production
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: .next/

      - name: Create deployment backup
        id: backup
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "backup_tag=backup_${TIMESTAMP}" >> $GITHUB_OUTPUT
          git tag backup_${TIMESTAMP}
          git push origin backup_${TIMESTAMP}
          echo "‚úÖ Created backup tag: backup_${TIMESTAMP}"

      - name: Deploy to Vercel Production
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run production health checks
        id: health_check
        timeout-minutes: 5
        run: |
          echo "Running production health checks..."
          sleep 60 # Wait for deployment to be ready
          
          # Health check endpoint
          if curl -f ${{ steps.deploy.outputs.preview-url }}/api/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            exit 1
          fi
          
          # Database connectivity check
          if curl -f ${{ steps.deploy.outputs.preview-url }}/api/db-health; then
            echo "‚úÖ Database connectivity check passed"
          else
            echo "‚ùå Database connectivity check failed"
            exit 1
          fi

      - name: Update deployment status
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "Production URL: ${{ steps.deploy.outputs.preview-url }}"
          echo "Backup tag: ${{ steps.backup.outputs.backup_tag }}"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed, initiating rollback..."
          # Trigger rollback workflow
          gh workflow run rollback.yml --ref main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack on Success
        if: needs.deploy-production.result == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: '‚úÖ Student Notes Hub deployed successfully to production!'
          SLACK_COLOR: 'good'

      - name: Notify Slack on Failure
        if: needs.deploy-production.result == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: '‚ùå Student Notes Hub deployment failed!'
          SLACK_COLOR: 'danger'

  database-migration:
    name: Database Migration Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Supabase CLI
        run: npm install -g supabase

      - name: Check for schema changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "db/"; then
            echo "‚ö†Ô∏è Database schema changes detected!"
            echo "Please run the following commands manually after deployment:"
            echo "1. supabase db push"
            echo "2. Review and apply any new migrations"
            echo "3. Update RLS policies if needed"
          else
            echo "‚úÖ No database changes detected"
          fi

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for Vercel deployment
        run: sleep 30

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          temporaryPublicStorage: true
          configPath: '.lighthouserc.json'
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    steps:
      - name: Security Headers Check
        run: |
          echo "üîí Security headers check would run here"
          echo "Consider using tools like securityheaders.com API"
          # Add actual security headers check here